import streamlit as st
import pandas as pd
import io
import datetime

# Set a generic page title since the application now supports multiple tools
st.set_page_config(page_title="üìë Automation Tools", layout="wide")

def parse_vietnamese_date(value: str) -> pd.Timestamp:
    """
    Convert a date string like '15 Thg 7 2023' to a pandas Timestamp.

    The input format consists of a day, the literal 'Thg', a month number,
    and a year. For example, '15 Thg 7 2023' means 15 July 2023.

    Parameters
    ----------
    value : str
        A date string in the format 'DD Thg M YYYY'.

    Returns
    -------
    pd.Timestamp or pd.NaT
        A pandas Timestamp representing the date, or NaT if parsing fails.
    """
    if isinstance(value, str):
        parts = value.split()
        # Expected format: [day, 'Thg', month, year]
        if len(parts) == 4 and parts[1].lower() == 'thg':
            day, _, month, year = parts
            try:
                # Compose a standard date string and convert
                date_str = f"{day}-{month}-{year}"
                return pd.to_datetime(date_str, format="%d-%m-%Y", errors="coerce")
            except Exception:
                return pd.NaT
    return pd.NaT

def detect_header_row(df_raw):
    for idx, row in df_raw.iterrows():
        if row.astype(str).str.contains('STT', na=False).any():
            return idx
    raise ValueError("Kh√¥ng t√¨m th·∫•y d√≤ng header ch·ª©a 'STT'")

def load_and_flatten_eas(eas_bytes):
    df_raw = pd.read_excel(io.BytesIO(eas_bytes), header=None)
    df_raw.iloc[:, 0] = df_raw.iloc[:, 0].astype(str)
    df_raw = df_raw[~df_raw.iloc[:, 0].str.contains(r'^\[\d+\]$', na=False)].reset_index(drop=True)
    header_row = detect_header_row(df_raw)
    df = pd.read_excel(io.BytesIO(eas_bytes), header=[header_row, header_row+1])

    # Flatten MultiIndex
    flat_cols = []
    for top, sub in df.columns:
        if pd.notna(sub) and not str(sub).startswith("Unnamed"):
            flat_cols.append(str(sub).strip())
        else:
            flat_cols.append(str(top).strip())
    df.columns = flat_cols
    return df

def clean_eas(df):
    rename_map = {
        'T√™n ng∆∞·ªùi mua(Buyer Name)': 'Buyer Name',
        'Ng√†y, th√°ng, nƒÉm ph√°t h√†nh': 'ISSUE_DATE',
        'Doanh s·ªë b√°n ch∆∞a c√≥ thu·∫ø(Revenue excluding VAT)': 'Revenue_ex_VAT',
        'Thu·∫ø GTGT(VAT amount)': 'VAT_Amount',
        'K√Ω hi·ªáu m·∫´u h√≥a ƒë∆°n': 'InvoiceSerial',
        'S·ªë h√≥a ƒë∆°n': 'InvoiceNumber'
    }
    df = df.rename(columns=rename_map)
    mst_col = next((c for c in df.columns if 'M√£ s·ªë thu·∫ø' in c or 'Tax code' in c), None)
    if mst_col:
        df = df.rename(columns={mst_col: 'TaxCode'})
    df = df.dropna(subset=['Buyer Name', 'Revenue_ex_VAT']).reset_index(drop=True)
    return df

def build_fiv(df_eas, df_kh):
    taxkey_kh = next((c for c in df_kh.columns 
                      if any(x in c for x in ['MST','CMND','PASSPORT','Tax code'])), None)
    records = []
    for idx, row in df_eas.iterrows():
        buyer = row['Buyer Name']
        cust_acc = pd.NA
        if 'TaxCode' in row and pd.notna(row['TaxCode']) and taxkey_kh:
            m = df_kh[df_kh[taxkey_kh] == row['TaxCode']]['Customer account']
            if not m.empty:
                cust_acc = m.iat[0]
        if pd.isna(cust_acc):
            m = df_kh[df_kh['Name'] == buyer]['Customer account']
            if not m.empty:
                cust_acc = m.iat[0]

        line_amount = row['Revenue_ex_VAT']
        vat_amount  = row.get('VAT_Amount', 0)
        total_amt   = line_amount + vat_amount

        records.append({
            'IdRef':                         idx + 1,
            'InvoiceDate':                   row['ISSUE_DATE'],
            'DocumentDate':                  row['ISSUE_DATE'],
            'CurrencyCode':                  'VND',
            'CustAccount':                   cust_acc,
            'InvoiceAccount':                cust_acc,
            'SalesName':                     buyer,
            'APMA_DimA':                     'TX',
            'APMC_DimC':                     '0000',
            'APMD_DimD':                     '00',
            'APMF_DimF':                     '0000',
            'TaxGroupHeader':                'OU',
            'PostingProfile':                '131103',
            'LineNum':                       1,
            'Description':                   'Doanh thu d·ªãch v·ª• spa',
            'SalesPrice':                    line_amount,
            'SalesQty':                      1,
            'LineAmount':                    line_amount,
            'TaxAmount':                     vat_amount,
            'TotalAmount':                   total_amt,
            'TaxGroupLine':                  'OU',
            'TaxItemGroup':                  '10%',
            'Line_MainAccountId':            '511301',
            'Line_APMA_DimA':                'TX',
            'Line_APMC_DimC':                '5301',
            'Line_APMD_DimD':                '00',
            'Line_APMF_DimF':                '0000',
            'BHS_VATInvocieDate_VATInvoice': row['ISSUE_DATE'],
            'BHS_Form_VATInvoice':           '',
            'BHS_Serial_VATInvoice':         row.get('InvoiceSerial', ''),
            'BHS_Number_VATInvoice':         row.get('InvoiceNumber', ''),
            'BHS_Description_VATInvoice':    'Doanh thu d·ªãch v·ª• spa'
        })

    cols_order = [
        'IdRef','InvoiceDate','DocumentDate','CurrencyCode','CustAccount','InvoiceAccount',
        'SalesName','APMA_DimA','APMC_DimC','APMD_DimD','APMF_DimF','TaxGroupHeader',
        'PostingProfile','LineNum','Description','SalesPrice','SalesQty','LineAmount',
        'TaxAmount','TotalAmount','TaxGroupLine','TaxItemGroup','Line_MainAccountId',
        'Line_APMA_DimA','Line_APMC_DimC','Line_APMD_DimD','Line_APMF_DimF',
        'BHS_VATInvocieDate_VATInvoice','BHS_Form_VATInvoice','BHS_Serial_VATInvoice',
        'BHS_Number_VATInvoice','BHS_Description_VATInvoice'
    ]
    return pd.DataFrame(records, columns=cols_order)

# Add a sidebar for selecting which tool to use
st.sidebar.title("Ch·ª©c nƒÉng")
tool_choice = st.sidebar.radio(
    "Ch·ªçn ch·ª©c nƒÉng",
    ["Senspa Automation Excel-AX", "Agoda LCB"],
    index=0,
)

if tool_choice == "Senspa Automation Excel-AX":
    # FIV generator UI
    st.title("üßæ FIV Generator")
    st.markdown("""
    Upload hai file **EAS.xlsx** v√† **KH.xlsx**, ·ª©ng d·ª•ng s·∫Ω t·ª± ƒë·ªông sinh file **Completed_FIV.xlsx**  
    - Lookup ∆∞u ti√™n theo MST/Tax code  
    - Fallback theo Buyer Name  
    - T√≠nh TotalAmount = Revenue_ex_VAT + VAT_Amount
    """)

    eas_file = st.file_uploader("Ch·ªçn file EAS.xlsx", type="xlsx", key="eas")
    kh_file  = st.file_uploader("Ch·ªçn file KH.xlsx", type="xlsx", key="kh")

    if eas_file and kh_file:
        try:
            df_kh     = pd.read_excel(kh_file)
            eas_bytes = eas_file.read()

            df_raw = load_and_flatten_eas(eas_bytes)
            df_eas = clean_eas(df_raw)
            df_fiv = build_fiv(df_eas, df_kh)

            df_fiv['IdRef'] = df_fiv['IdRef'].astype(str)
            date_cols = ['InvoiceDate', 'DocumentDate', 'BHS_VATInvocieDate_VATInvoice']
            for c in date_cols:
                df_fiv[c] = pd.to_datetime(df_fiv[c]).dt.date

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter', date_format='dd/mm/yyyy') as writer:
                df_fiv.to_excel(writer, index=False, sheet_name='FIV')

            output.seek(0)
            st.download_button(
                "üì• T·∫£i Completed_FIV.xlsx",
                data=output.getvalue(),
                file_name="Completed_FIV.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        except Exception as e:
            st.error(f"C√≥ l·ªói: {e}")

elif tool_choice == "Agoda LCB":
    # Agoda LCB processing UI
    st.title("üè® Agoda LCB Processor")
    st.markdown("""
    T·∫£i l√™n file Excel ƒë·ªëi chi·∫øu t·ª´ Agoda, ch·ªçn kho·∫£ng ng√†y tr·∫£ ph√≤ng mu·ªën l·ªçc,
    v√† ·ª©ng d·ª•ng s·∫Ω xu·∫•t ra file ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
    """)

    # Allow the user to pick a date range; default to the last 7 days
    today = datetime.date.today()
    default_start = today - datetime.timedelta(days=7)
    default_end = today
    col1, col2 = st.columns(2)
    start_date = col1.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=default_start, max_value=today)
    end_date = col2.date_input("Ng√†y k·∫øt th√∫c", value=default_end, max_value=today)

    if start_date > end_date:
        st.error("Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c.")

    agoda_file = st.file_uploader("Ch·ªçn file Agoda (Excel)", type=["xlsx"], key="agoda")

    if agoda_file and (start_date <= end_date):
        try:
            # ƒê·ªçc sheet m·∫∑c ƒë·ªãnh theo t√™n trong file Agoda
            df = pd.read_excel(agoda_file, sheet_name="file t·∫£i xu·ªëng t·ª´ Agoda")

            # Chuy·ªÉn ƒë·ªïi c·ªôt ng√†y tr·∫£ ph√≤ng sang ki·ªÉu datetime
            df["Ng√†y tr·∫£ ph√≤ng"] = df["Ng√†y tr·∫£ ph√≤ng"].apply(parse_vietnamese_date)

            # Chuy·ªÉn ƒë·ªïi c·ªôt doanh thu v√† s·ªë ti·ªÅn b·ªã tr·ª´ v·ªÅ ki·ªÉu s·ªë (b·ªè d·∫•u ph·∫©y)
            df["Doanh thu th·ª±c"] = (
                df["Doanh thu th·ª±c"].astype(str)
                .str.replace(",", "", regex=False)
                .str.strip()
                .astype(float)
            )
            df["S·ªë ti·ªÅn b·ªã tr·ª´"] = (
                df["S·ªë ti·ªÅn b·ªã tr·ª´"].astype(str)
                .str.replace(",", "", regex=False)
                .str.strip()
                .astype(float)
            )

            # L·ªçc d·ªØ li·ªáu theo kho·∫£ng ng√†y tr·∫£ ph√≤ng
            start_ts = pd.to_datetime(start_date)
            end_ts = pd.to_datetime(end_date)
            mask_date = (df["Ng√†y tr·∫£ ph√≤ng"] >= start_ts) & (df["Ng√†y tr·∫£ ph√≤ng"] <= end_ts)
            df_filtered = df.loc[mask_date].copy()

            # Gi·ªØ l·∫°i c√°c d√≤ng c√≥ doanh thu v√† s·ªë ti·ªÅn b·ªã tr·ª´ > 0
            df_filtered = df_filtered[
                (df_filtered["Doanh thu th·ª±c"] > 0) & (df_filtered["S·ªë ti·ªÅn b·ªã tr·ª´"] > 0)
            ]

            # Lo·∫°i b·ªè c√°c c·ªôt Unnamed do th·ª´a
            df_filtered = df_filtered.loc[
                :, ~df_filtered.columns.str.contains("^Unnamed")
            ]

            # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu k·∫øt qu·∫£
            st.subheader("B·∫£ng d·ªØ li·ªáu sau khi l·ªçc")
            st.dataframe(df_filtered)

            # Xu·∫•t file excel cho ng∆∞·ªùi d√πng t·∫£i v·ªÅ
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                df_filtered.to_excel(writer, index=False, sheet_name="Agoda")
            output.seek(0)
            file_name = f"Agoda_processed_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx"
            st.download_button(
                "üì• T·∫£i file Agoda ƒë√£ x·ª≠ l√Ω",
                data=output.getvalue(),
                file_name=file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        except Exception as e:
            st.error(f"C√≥ l·ªói khi x·ª≠ l√Ω file Agoda: {e}")
